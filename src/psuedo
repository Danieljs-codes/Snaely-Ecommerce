import { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/20/solid';
import { useSearchParams } from 'react-router-dom';
import { PRODUCTS_PER_PAGE } from '../utils/constants';
import { useState } from 'react';

function Pagination({ count }) {
  const [searchParams, setSearchParams] = useSearchParams();

  const [showInput, setShowInput] = useState(false);
  const [inputValue, setInputValue] = useState('');

  function handleInputChange(e) {
    setInputValue(e.target.value);
  }

  function handleInputSubmit(e) {
    e.preventDefault();
    const pageNumber = Number(inputValue);
    if (pageNumber >= 1 && pageNumber <= pageCount) {
      searchParams.set('page', pageNumber);
      setSearchParams(searchParams);
      setShowInput(false);
    }
  }

  const currentPage = Number(searchParams.get('page')) || 1;

  const pageCount = Math.ceil(count / PRODUCTS_PER_PAGE);

  function prevPage() {
    const prevPage = currentPage === 1 ? currentPage : currentPage - 1;
    searchParams.set('page', prevPage);
    setSearchParams(searchParams);
  }

  function nextPage() {
    const nextPage = currentPage === pageCount ? currentPage : currentPage + 1;

    searchParams.set('page', nextPage);
    setSearchParams(searchParams);
  }

  if (pageCount <= 1) return null;

  return (
    <div className="flex items-center justify-between border-t border-gray-200 bg-white px-4 py-3 sm:px-6">
      <div className="flex flex-1 sm:items-center sm:justify-between">
        <div>
          <p className="text-sm text-gray-700">
            Showing{' '}
            <span className="font-medium">
              {(currentPage - 1) * PRODUCTS_PER_PAGE + 1}
            </span>{' '}
            to{' '}
            <span className="font-medium">
              {currentPage === pageCount
                ? count
                : currentPage * PRODUCTS_PER_PAGE}
            </span>{' '}
            of <span className="font-medium">{count}</span> results
          </p>
        </div>
        <div>
          <nav
            className="isolate inline-flex -space-x-px rounded-md shadow-sm"
            aria-label="Pagination"
          >
            <button
              disabled={currentPage === 1}
              onClick={prevPage}
              className="relative inline-flex items-center rounded-l-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0"
            >
              <span className="sr-only">Previous</span>
              <ChevronLeftIcon className="h-5 w-5" aria-hidden="true" />
            </button>
            {/* Current: "z-10 bg-indigo-600 text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600", Default: "text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:outline-offset-0" */}
            {/* <a
              href="/"
              aria-current="page"
              className="relative z-10 inline-flex items-center bg-indigo-600 px-4 py-2 text-sm font-semibold text-white focus:z-20 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
            >
              1
            </a>

            <a
              href="/"
              className="relative inline-flex items-center px-4 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0"
            >
              10
            </a> */}
            <button>
              {Array.from({ length: pageCount }).map((_, index) => (
                <a
                  key={index}
                  href="/"
                  className={`relative inline-flex items-center px-4 py-2 text-sm font-semibold text-gray-900 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0 ${
                    currentPage === index + 1
                      ? 'z-10 bg-indigo-600 text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600'
                      : ''
                  }`}
                >
                  {index + 1}
                </a>
              ))}
              <button onClick={() => setShowInput(!showInput)}>...</button>
              {showInput && (
                <form onSubmit={handleInputSubmit}>
                  <input
                    type="number"
                    value={inputValue}
                    onChange={handleInputChange}
                    min="1"
                    max={pageCount}
                  />
                  <button type="submit">Go</button>
                </form>
              )}
            </button>
            <button
              onClick={nextPage}
              disabled={currentPage === pageCount}
              className="relative inline-flex items-center rounded-r-md px-2 py-2 text-gray-400 ring-1 ring-inset ring-gray-300 hover:bg-gray-50 focus:z-20 focus:outline-offset-0"
            >
              <span className="sr-only">Next</span>
              <ChevronRightIcon className="h-5 w-5" aria-hidden="true" />
            </button>
          </nav>
        </div>
      </div>
    </div>
  );
}
export default Pagination;
